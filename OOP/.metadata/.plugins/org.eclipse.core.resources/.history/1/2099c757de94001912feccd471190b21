package com.techlab.result.analyze;

import java.util.stream.IntStream;

import com.techlab.board.Board;
import com.techlab.board.Cell;

public class ResultAnalyze {
	private Result result = null;
	private Board board;
	private Cell[] boardCells;
	private int MAXIMUM_POSITION_BOARD = 9;
	private String winingSign = null;

	public ResultAnalyze(Board board) {
		this.board = board;
	}

	public String getResultState() {
		boardCells = board.getBoardState();
		if (checkResultOfWinMatch())
			return winingSign;
		return null;
	}

	private boolean checkResultOfWinMatch() {
		if (checkDiagonalPatternCreate())
			return true;
		if (checkVerticalPatternCreate())
			return true;
		if (checkHorizontalPatternCreate())
			return true;
		return false;
	}

	private boolean checkHorizontalPatternCreate() {
		int startPosition = 0;
		int increasePosition = 1;
		int increaseStartposition = 3;
		checkPattern(startPosition, increasePosition, increaseStartposition);
		if (winingSign.equals(null))
			return false;
		return true;
	}

	private boolean checkDiagonalPatternCreate() {
		int startPosition = 0;
		int increasePosition = 4;
		int increaseStartposition = 4;
		checkPattern(startPosition, increasePosition, increaseStartposition);
		if (!winingSign.equals(null))
			return true;

		startPosition = 2;
		increasePosition = 2;
		increaseStartposition = 4;
		checkPattern(startPosition, increasePosition, increaseStartposition);
		if (winingSign.equals(null))
			return false;
		return true;
	}

	private boolean checkVerticalPatternCreate() {
		int startPosition = 0;
		int increasePosition = 3;
		int increaseStartposition = 1;
		checkPattern(startPosition, increasePosition, increaseStartposition);
		if (winingSign.equals(null))
			return false;
		return true;
	}

	private String checkPattern(int startPosition, int increasePosition, int increaseStartposition) {
		for (int index = startPosition; index + increasePosition
				+ increasePosition < MAXIMUM_POSITION_BOARD; index += increasePosition) {
			if (boardCells[index].getCellState().equals(boardCells[index + increasePosition].getCellState())
					&& boardCells[index].getCellState()
							.equals(boardCells[index + increasePosition + increasePosition].getCellState())
					&& !boardCells[index].getCellState().toString().equals("Empty"))

				 return boardCells[startPosition].getCellState().toString();
		}
return null;
	}
}
